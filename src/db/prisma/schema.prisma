generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CrawlTasks {
  id           BigInt          @id @default(autoincrement())
  status       CrawlTaskStatus @default(PENDING)
  completed_at DateTime?
  error        String?
  created_at   DateTime        @default(now())
  source_id    BigInt
  Sources      Sources         @relation(fields: [source_id], references: [id])
}

model CrawledData {
  id         BigInt     @id @default(autoincrement())
  text       String
  date       DateTime
  created_at DateTime   @default(now())
  source_url BigInt
  contractor String
  SourceUrls SourceUrls @relation(fields: [source_url], references: [id])
}

model KeyWords {
  id         BigInt   @id @default(autoincrement())
  word       String
  priority   Priority @default(MEDIUM)
  active     Boolean
  created_at DateTime @default(now())
}

model Settings {
  id         BigInt   @id
  name       String
  value      String
  active     Boolean
  created_at DateTime @default(now())
  source_id  BigInt
  Sources    Sources  @relation(fields: [source_id], references: [id])
}

model SourceUrls {
  id          BigInt        @id
  url         String
  active      Boolean
  created_at  DateTime      @default(now())
  source_id   BigInt
  CrawledData CrawledData[]
  Sources     Sources       @relation(fields: [source_id], references: [id])
}

model Sources {
  id                       BigInt       @id
  site_name                String
  worker_name              String
  last_scrape_time         DateTime?
  scrape_frequency_seconds Float
  active                   Boolean
  created_at               DateTime     @default(now())
  CrawlTasks               CrawlTasks[]
  Settings                 Settings[]
  SourceUrls               SourceUrls[]
}

model User {
  id        BigInt   @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

enum CrawlTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
